"""
Django settings for TravelGuide project.

Generated by 'django-admin startproject' using Django 1.10.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""
from __future__ import absolute_import
import os,sys
from django.utils.translation import ugettext_lazy as _
from decouple import config,Csv
import dj_database_url

BASE_DIR = os.path.dirname(os.path.dirname(__file__))
APP_HOME=BASE_DIR

SECRET_KEY =  '{{cookiecutter.project_name}}ffhjklhjhdfgghlsnjvv%9h@m=hz@jid=s7*t*8r73'
DEBUG = os.getenv("DEBUG")
if DEBUG=="false":
    DEBUG=False
else:
    DEBUG=True
    os.environ["APP_HOME"] = BASE_DIR

POSTGRESQL_ADDON_URI = os.getenv("POSTGRESQL_ADDON_URI")
POSTGRESQL_ADDON_PORT = os.getenv("POSTGRESQL_ADDON_PORT")
POSTGRESQL_ADDON_HOST = os.getenv("POSTGRESQL_ADDON_HOST")
POSTGRESQL_ADDON_DB = os.getenv("POSTGRESQL_ADDON_DB")
POSTGRESQL_ADDON_PASSWORD = os.getenv("POSTGRESQL_ADDON_PASSWORD")
POSTGRESQL_ADDON_USER = os.getenv("POSTGRESQL_ADDON_USER")

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis', #''django.db.backends.postgresql_psycopg2',  #'django.db.backends.mysql',
        'NAME': POSTGRESQL_ADDON_DB,
        'USER': POSTGRESQL_ADDON_USER,
        'PASSWORD': POSTGRESQL_ADDON_PASSWORD,
        'HOST': POSTGRESQL_ADDON_HOST,
        'PORT': 5170,
        'CONN_MAX_AGE': 1200,
    }
}

ALLOWED_HOSTS = ['*']

MEDIA_ROOT=os.getenv("APP_HOME")+os.getenv("STATIC_URL_PREFIX")+'/storage/'
MEDIA_URL = os.getenv('MEDIA_URL')
#statics
STATIC_URL = os.getenv('STATIC_URL_PREFIX')+'/'
STATIC_ROOT = os.getenv('STATIC_FILES_PATH')

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

#Email configuration
DEFAULT_FROM_EMAIL = ''
SERVER_EMAIL = ''
EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_PORT = 587
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True
PASSWORD_RESET_TIMEOUT_DAYS=3
SENDGRID_API_KEY=''
GOOGLE_DISTANCE_API_KEY=""

MAP_WIDGETS = {
    "GOOGLE_MAP_API_KEY": GOOGLE_DISTANCE_API_KEY
}
# Application definition

INSTALLED_APPS = [
    'resetpassword',
    'jet',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'oauth2_provider',
    'rest_framework',
    'rest_framework_docs',
    'rest_framework_cache',
    'bo',
    'easy_thumbnails',
    'image_cropping',
    'import_export',
    'imagekit',
    'autofixture',
    'corsheaders',
    'django_extensions',
    'django.contrib.gis',
    'tinymce',
    'mapwidgets',
    'cacheops',
    'ionicdjangocrudgenerator',
]

TINYMCE_DEFAULT_CONFIG = {
    'height': 360,
    'width': 800,
    'cleanup_on_startup': True,
    'custom_undo_redo_levels': 20,
    'selector': 'textarea',
    'theme': 'modern',
    'plugins': '''
            textcolor save link image media preview codesample contextmenu
            table code lists fullscreen  insertdatetime  nonbreaking
            contextmenu directionality searchreplace wordcount visualblocks
            visualchars code fullscreen autolink lists  charmap print  hr
            anchor pagebreak
            ''',
    'toolbar1': '''
            fullscreen preview bold italic underline | fontselect,
            fontsizeselect  | forecolor backcolor | alignleft alignright |
            aligncenter alignjustify | indent outdent | bullist numlist table |
            | link image media | codesample |
            ''',
    'toolbar2': '''
            visualblocks visualchars |
            charmap hr pagebreak nonbreaking anchor |  code |
            ''',
    'contextmenu': 'formats | link image',
    'menubar': True,
    'statusbar': True,
    }
from easy_thumbnails.conf import Settings as thumbnail_settings
THUMBNAIL_PROCESSORS = (
    'image_cropping.thumbnail_processors.crop_corners',
) + thumbnail_settings.THUMBNAIL_PROCESSORS

JET_THEMES = [
    {
        'theme': 'default', # theme folder name
        'color': '#47bac1', # color of the theme's button in user menu
        'title': 'Default' # theme title
    },
    {
        'theme': 'green',
        'color': '#44b78b',
        'title': 'Green'
    },
    {
        'theme': 'light-green',
        'color': '#2faa60',
        'title': 'Light Green'
    },
    {
        'theme': 'light-violet',
        'color': '#a464c4',
        'title': 'Light Violet'
    },
    {
        'theme': 'light-blue',
        'color': '#5EADDE',
        'title': 'Light Blue'
    },
    {
        'theme': 'light-gray',
        'color': '#222',
        'title': 'Light Gray'
    }
]
JET_SIDE_MENU_COMPACT = False

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

REST_FRAMEWORK_DOCS = {
    'HIDE_DOCS': False,
  #  'ALLOWED_ENDPOINTS' : ["/api/vtc/","/api/search/","/api/searchresults/"]
}

#oAuth2 expiration
OAUTH_ACCESS_TOKEN_MODEL = 'oauth2_provider.models.AccessToken'
OAUTH2_PROVIDER = {
    'ACCESS_TOKEN_EXPIRE_SECONDS' : 315360000,
    'SCOPES': {'read': 'Read scope', 'write': 'Write scope', 'groups': 'Access to your groups'}
}

#Logging
U_LOGFILE_SIZE = 10 * 1024 * 1024
U_LOGFILE_COUNT = 7
fileName="django.log"
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(MEDIA_ROOT, fileName),
            'maxBytes': U_LOGFILE_SIZE,
            'backupCount': U_LOGFILE_COUNT,
            'formatter': 'verbose'
        },
        'celerylog': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(MEDIA_ROOT, fileName),
            'maxBytes': U_LOGFILE_SIZE,
            'backupCount': U_LOGFILE_COUNT,
            'formatter': 'verbose'
        },
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'propagate': True,
            'level': 'INFO',
        },
        'bo': {
            'handlers': ['file'],
            'level': 'INFO',
        },
    }
}

##### CACHE #########

REDIS_URL = os.getenv("REDIS_URL")+"/1"
DJANGO_REDIS_IGNORE_EXCEPTIONS = True
DJANGO_REDIS_LOG_IGNORED_EXCEPTIONS = True

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "TIMEOUT": 300,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "SOCKET_CONNECT_TIMEOUT": 3,  # in seconds
            "SOCKET_TIMEOUT": 5,  # in seconds
            'PARSER_CLASS': 'redis.connection.HiredisParser',
            'CONNECTION_POOL_CLASS': 'redis.BlockingConnectionPool',
            'CONNECTION_POOL_CLASS_KWARGS': {
                'max_connections': 50,
                'timeout': 20,
            },
            'MAX_CONNECTIONS': 100,

        }
    }
}

SESSION_ENGINE='django.contrib.sessions.backends.cached_db'
USER_AGENTS_CACHE = 'default'
##### CACHE ##########################
CACHEOPS_REDIS=os.getenv("REDIS_URL")+"/1"
CACHEOPS_DEGRADE_ON_FAILURE = True
#CACHEOPS_PREFIX = os.getenv("INSTANCE_NUMBER")
CACHEOPS = {
    # Enable manual caching on all other models with default timeout of an hour
    # Use Post.objects.cache().get(...)
    #  or Tags.objects.filter(...).order_by(...).cache()
    # to cache particular ORM request.
    # Invalidation is still automatic
   # '*.*': {'timeout': 60 * 5}, #5 minutes

    ##### Penser à faire un  invalidate_model(Modele) pour chaque nouvelle entrée ##############
    ### models specific django #####
   'oauth2_provider.application': {'ops': ('fetch', 'get'), 'timeout': 60 * 60 * 24},  # 1 day cache
   'auth.group': {'ops': ('fetch', 'get'), 'timeout': 60 * 60 *24},  # 1 day cache
   'auth.group.permissions': {'ops': ('fetch', 'get'), 'timeout': 60 * 60*24},  # 1 hour cache
   'bo.appuser.groups': {'ops': ('fetch', 'get'), 'timeout': 60 * 60*24},  # 1 hour cache
   'django.content_type': {'ops': ('fetch', 'get'), 'timeout': 60 * 60*24},  # 1 hour cache
   'bo.appuser.user.permissions': {'ops': ('fetch', 'get'), 'timeout': 60 * 60*24},  # 1 hour cache
   'auth.permission': {'ops': ('fetch', 'get'), 'timeout': 60 * 60*24},  # 1 hour cache

}

SESSION_ENGINE='django.contrib.sessions.backends.cached_db'
#Rest
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
       'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
     #  'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework_filters.backends.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter',
      #  'rest_framework_gis.filters.DistanceToPointFilter',
    ),
    'DEFAULT_RENDERER_CLASSES': (
       # 'api.serializers.HashidJSONEncoder',
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    #'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 21, #nombre impair
}


X_FRAME_OPTIONS = 'ALLOWALL'
CORS_ORIGIN_ALLOW_ALL=True
 

ROOT_URLCONF = '{{cookiecutter.project_name}}.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'APP_DIRS': True,
        'DIRS': [
            BASE_DIR,
            os.path.join(BASE_DIR, 'templates')
        ],
        'OPTIONS': {
            'debug': True,
            'context_processors': [
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.template.context_processors.debug',
                    'django.template.context_processors.i18n',
                    'django.template.context_processors.media',
                    'django.template.context_processors.static',
                    'django.template.context_processors.tz',
                    'django.contrib.messages.context_processors.messages',
            ],

        },
    },
]


WSGI_APPLICATION = '{{cookiecutter.project_name}}.wsgi.application'



# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

# Internationalization
LANGUAGE_CODE = 'fr-FR'
TIME_ZONE = 'Europe/Paris'
USE_I18N = True
USE_L10N = True
USE_TZ = True

FIXTURE_DIRS = (
   '/fixtures/',
)



################################### CELERY ###################################
#
# Gestion automatique (batchs) de certains traitements tels que l'envoi de
# push, la suppression de produits dont la date est périmée...
#
##############################################################################
BROKER_URL = os.getenv("REDIS_URL")
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
CELERY_ENABLE_UTC = True
BROKER_POOL_LIMIT = None
CELERY_TASK_RESULT_EXPIRES=180
from datetime import timedelta
CELERY_IMPORTS = (
    'bo.tasks',
)
if instanceName is not None:
    CELERYBEAT_SCHEDULE = {
        
    }
else:
    CELERYBEAT_SCHEDULE = {}
 

